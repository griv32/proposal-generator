[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "proposal-generator"
version = "1.0.0"
description = "AI-powered tool that transforms discovery call transcriptions into professional business proposals"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "GPL-3.0-or-later"}
authors = [
    {name = "Proposal Generator Contributors", email = "noreply@github.com"}
]
keywords = ["ai", "langchain", "proposal", "business", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing",
]
dependencies = [
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    "langchain-community>=0.3.0",
    "langchain-openai>=0.2.0",
    "pydantic>=2.6.1",
    "python-dotenv>=1.0.1",
    "jinja2>=3.1.3",
    "pydantic-settings>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/griv32/proposal-generator"
Repository = "https://github.com/griv32/proposal-generator.git"
Issues = "https://github.com/griv32/proposal-generator/issues"

[project.scripts]
proposal-generator = "src.proposal_generator.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
lint = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
strict = true
show_error_codes = true
pretty = true

[[tool.mypy.overrides]]
module = ["langchain.*", "langchain_openai.*", "langchain_community.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=proposal_generator --cov-report=term-missing --cov-report=html --cov-fail-under=80"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/proposal_generator"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "RET", # flake8-return
    "PTH", # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "PTH110", # os.path.exists - we'll keep some os.path usage for compatibility
    "PTH103", # os.makedirs - we'll keep some os.path usage for compatibility
    "PTH118", # os.path.join - we'll keep some os.path usage for compatibility
    "PTH119", # os.path.basename - we'll keep some os.path usage for compatibility
    "PTH120", # os.path.dirname - we'll keep some os.path usage for compatibility
    "PTH123", # open() - we'll keep some open() usage for compatibility
    "PTH100", # os.path.abspath - we'll keep some os.path usage for compatibility
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "FBT"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.hatch.build.targets.wheel]
packages = ["src/proposal_generator"]

[tool.hatch.version]
path = "src/proposal_generator/__init__.py"